/*
  Copyright 2012 Quest Software, Inc.
  ALL RIGHTS RESERVED.

  This software is the confidential and proprietary information of
  Quest Software Inc. ("Confidential Information").  You shall not
  disclose such Confidential Information and shall use it only in
  accordance with the terms of the license agreement you entered
  into with Quest Software Inc.

  QUEST SOFTWARE INC. MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT
  THE SUITABILITY OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
  NON-INFRINGEMENT. QUEST SOFTWARE SHALL NOT BE LIABLE FOR ANY
  DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING
  OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 */  

package de.quest.pso.fxm.agent.customCollector;

import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Collections;
import java.util.List;

import com.quest.glue.api.services.SupportBundleListener;

/**
 * A class that can contribute information about the CustomFXMDataCollector to 
 * any support bundle that is generated.
 */
public class CustomFXMDataCollectorSupportBundle implements SupportBundleListener {

/** A reference to the main agent class so we can collect information from it */
private final CustomFXMDataCollectorImpl mCustomFXMDataCollector;

/**
 * Creates a new support bundle contributer.
 */
public CustomFXMDataCollectorSupportBundle(CustomFXMDataCollectorImpl agent) {
    mCustomFXMDataCollector = agent;
}

/**
 * Whether or not this collector provides text information. If it does, then
 * {@link #collectText(OutputStream)} will be called.
 */
public boolean providesText() {
    // We contribute textual information to the support bundle.
    return true;
}

/**
 * Whether or not this collector contributes files. If it does, then
 * {@link #collectFiles()} will be called.
 *
 * @return true if collector contributes files to the support bundle
 */
public boolean providesFiles() {
    // we do not add any files to the support bundle.
    return false;
}

/**
 * Returns the file name or directory name, optionally with relative path information, 
 * that indicates where this collector would like it's information stored. 
 * 
 * The path is relative to the top of the support bundles and should used
 * <code>File.separator</code> between path elements. 
 * 
 * @return null for no suggested name, or a path name to use for this
 *         collector's data.
 */
public String getSuggestedLocation() { 
    return "CustomFXMDataCollector" + File.separator + "info.txt";
}

/**
 * Provides a human readable name for this collector. This does not have 
 * to be unique, but should provide enough information about the collector
 * to allow a user to easily identify its output.
 *  
 * @return a name for the collector.
 */
public String getCollectorName() {
    return "CustomFXMDataCollector information";
}

/**
 * Whether or not this collector is currently enabled. Collectors that only work on a 
 * specific system or set of conditions can still be added to the bundle. They will
 * only be executed if they indicate that they are enabled.
 * 
 * @return true if the collector is enabled and ready to collect data, and false
 *         if it is not.
 */
public boolean enabled() {
    if ( mCustomFXMDataCollector == null ) {
        return false;
    }
    return true;
}

/**
 * Triggers the data collection and writes it to the output stream. This should be
 * used when text information needs to be collected. All output will be sent to a
 * single file.
 *  
 * @param output The output stream to write to. You do not need to close 
 *               this stream when the collector has completed.
 * 
 * @throws Exception Any exceptions generated by the collector will be caught 
 *                   and logged by the support bundle framework.
 */
public void collectText(OutputStream output) throws Exception {
    PrintStream out = new PrintStream(output);
    out.println("The CustomFXMDataCollector has something to say");
}

/**
 * If the collector needs to contribute files to the support bundle, then this
 * method should be implemented to return a list of file handles for all files
 * the are to be included within the support-bundle
 *
 * @return list of file handles to include within the support-bundle
 * @throws Exception Any exceptions generated by the collector will be caught
 *                   and logged by the support bundle framework.
 */
@Override
public List<File> collectFiles() throws Exception {
    // we don't have any files to contribute, so this method will not be called
    // by the support bundle framework
    return Collections.emptyList();
}

}